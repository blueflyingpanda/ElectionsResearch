import ssl
from utils.progress_bar import show_progress_bar
from selenium import webdriver
import bs4

browser = webdriver.Chrome()


def collide_two_lists(lst1: list, lst2: list):
    res = []
    for i in range(min(len(lst1), len(lst2))):
        res.append(lst1[i])
        res.append(lst2[i])
    if len(lst1) != len(lst2):
        res.append(lst1[len(lst2)])
    return res


def parse_page_info(link):
    link_end = 1
    csv_part = ''
    while True:
        browser.get(link + str(link_end))
        html_source = browser.page_source
        soup = bs4.BeautifulSoup(html_source, 'html.parser')
        if soup.find('td', {"class": "dataTables_empty"}):
            break
        rows = soup.find_all('a', {"class": "list-link"})
        candidates = [r.text for r in rows]
        rows = soup.find_all('td')
        tmp = [r.text for r in rows]
        declined = tmp.count('отказ в регистрации')
        rows = soup.find_all('tr', {"class": "text-center even"})
        did_won_even = []
        parties_even = []
        registered_even = []
        for r in rows:
            tds = list(r.children)
            did_won_even.append(1 if tds[-2].text != ' ' else 0)
            parties_even.append(tds[4].text)
            registered_even.append(tds[7].text == 'зарегистрирован')
        rows = soup.find_all('tr', {"class": "text-center odd"})
        did_won_odd = []
        parties_odd = []
        registered_odd = []
        for r in rows:
            tds = list(r.children)
            did_won_odd.append(1 if tds[-2].text != ' ' else 0)
            parties_odd.append(tds[4].text)
            registered_odd.append(tds[7].text == 'зарегистрирован')
        did_won = collide_two_lists(did_won_odd, did_won_even)
        parties = collide_two_lists(parties_odd, parties_even)
        registered = collide_two_lists(registered_odd, registered_even)
        for i in range(len(candidates)):
            if registered[i]:
                csv_part += f'{candidates[i]},{declined},{parties[i]},{did_won[i]}\n'
        print(link_end)
        link_end += 1
    return csv_part

def parse_page_results(link):
    csv_part = ''
    browser.get(link)
    html_source = browser.page_source
    soup = bs4.BeautifulSoup(html_source, 'html.parser')
    rows = soup.find_all('h1', {"class": "report-title"})
    ds = rows[0].text
    district = ds[ds.find('округа') + len('округа') + 1:]
    rows = soup.find_all('td', {"class": "text-left"})
    rows = rows[12:]
    candidates = [r.text for r in rows]
    rows = soup.find_all('td', {"class": "text-center"})
    txt = rows[0].text
    mandate = txt.split('№')[1].strip()
    rows = soup.find_all('td', {"class": "text-right"})
    potential_voters = int(rows[1].text)
    inside_voters = int(rows[3].text)
    early_voters = int(rows[4].text)
    outside_voters = int(rows[5].text)
    attendance = (inside_voters + early_voters + outside_voters) * 100 / potential_voters
    early = early_voters * 100 / potential_voters
    outside = outside_voters * 100 / potential_voters
    rows = rows[13:]
    votes = [r.text for r in rows]
    for i in range(len(candidates)):
        csv_part += f'{candidates[i]},{district},{mandate},{votes[i]},{potential_voters},{inside_voters},{early_voters},{outside_voters},{attendance},{early},{outside}\n'
    return csv_part


def parse_election_info2017():
    link_left = 'http://www.moscow-city.vybory.izbirkom.ru/region/region/moscow-city?action=show&root=1&tvd='
    link_right = '&vrn=4774001137457&region=77&global=null&sub_region=77&prver=0&pronetvd=null&cuiknum=null&report_mode=null&type=220&number='
    link_mids = (
        '4774001137463',
        '4774001137464',
        '4774001137465',
        '4774002138804',
        '4774002138805',
        '4774002138806',
        '4774003123938',
        '4774003123939',
        '4774012107877',
        '4774012107878',
        '4774004151548',
        '4774004151547',
        '4774004151549',
        '4774005159149',
        '4774005159150',
        '4774005159151',
        '4774006133202',
        '4774006133203',
        '4774006133204',
        '4774007117789',
        '4774007117790',
        '4774008112814',
        '4774008112815',
        '4774010120042',
        '4774010120043',
        '4774010120044',
        '4774009134024',
        '4774009134025',
        '4774009134026',
        '4774011164122',
        '4774011164123',
        '4774011164124',
        '4774013126105',
        '4774013126106',
        '4774014127356',
        '4774014127357',
        '4774014127358',
        '4774015125479',
        '4774015125480',
        '4774015125481',
        '4774016123407',
        '4774016123408',
        '4774017109310',
        '4774017109311',
        '4774018119471',
        '4774018119472',
        '4774018119473',
        '4774018119474',
        '4774019123064',
        '4774019123065',
        '4774020142944',
        '4774020142945',
        '4774022146204',
        '4774022146205',
        '4774024151060',
        '4774024151061',
        '4774025130167',
        '4774025130168',
        '4774026116759',
        '4774026116760',
        '4774027138657',
        '4774027138658',
        '4774027138659',
        '4774028131168',
        '4774028131169',
        '4774029131732',
        '4774029131733',
        '4774030117556',
        '4774030117557',
        '4774031150415',
        '4774031150416',
        '4774033139896',
        '4774033139897',
        '4774035127413',
        '4774035127414',
        '4774040125484',
        '4774040125485',
        '4774032129795',
        '4774032129796',
        '4774034121516',
        '4774034121517',
        '4774037132330',
        '4774037132331',
        '4774037132332',
        '4774038112491',
        '4774038112492',
        '4774039117558',
        '4774039117559',
        '4774041119361',
        '4774041119362',
        '4774042124060',
        '4774042124061',
        '4774043127376',
        '4774043127377',
        '4774044122775',
        '4774044122776',
        '4774045124912',
        '4774045124913',
        '4774046124875',
        '4774046124876',
        '4774046124877',
        '4774047135543',
        '4774047135544',
        '4774048101212',
        '4774048101213',
        '4774049118224',
        '4774049118225',
        '4774049118226',
        '4774050137747',
        '4774050137748',
        '4774051128354',
        '4774051128355',
        '4774051128356',
        '4774052120879',
        '4774052120880',
        '4774052120881',
        '4774053124433',
        '4774053124434',
        '4774054119828',
        '4774054119829',
        '4774055127958',
        '4774055127959',
        '4774055127960',
        '4774056135012',
        '4774056135013',
        '4774057146373',
        '4774057146374',
        '4774057146375',
        '4774058116515',
        '4774058116516',
        '4774059126072',
        '4774059126073',
        '4774059126074',
        '4774060123797',
        '4774060123798',
        '4774060123799',
        '4774061104160',
        '4774061104161',
        '4774062117711',
        '4774062117712',
        '4774063117435',
        '4774063117436',
        '4774063117437',
        '4774064162610',
        '4774064162611',
        '4774064162612',
        '4774064162613',
        '4774064162614',
        '4774064162615',
        '4774065109393',
        '4774065109394',
        '4774066120819',
        '4774066120820',
        '4774066120821',
        '4774067136362',
        '4774067136363',
        '4774067136364',
        '477406898052',
        '477406898053',
        '4774069123087',
        '4774069123088',
        '4774070141709',
        '4774070141710',
        '4774070141711',
        '4774075155461',
        '4774075155462',
        '4774075155463',
        '4774075155464',
        '477407199571',
        '477407199572',
        '4774072168743',
        '4774072168744',
        '4774072168745',
        '4774072168746',
        '4774073136974',
        '4774073136975',
        '4774073136976',
        '4774073136977',
        '4774074138228',
        '4774074138229',
        '4774074138230',
        '4774076147667',
        '4774076147668',
        '4774076147669',
        '4774078126729',
        '4774078126730',
        '4774078126731',
        '4774133140067',
        '4774133140068',
        '4774133140069',
        '4774133140070',
        '4774079115979',
        '4774079115980',
        '4774080151395',
        '4774080151396',
        '4774080151397',
        '4774081117444',
        '4774081117445',
        '4774082121716',
        '4774082121717',
        '4774083117859',
        '4774083117860',
        '4774084142983',
        '4774084142984',
        '4774084142985',
        '4774084142986',
        '4774084142987',
        '4774085133042',
        '4774085133043',
        '4774085133044',
        '4774086132820',
        '4774086132821',
        '4774086132822',
        '4774086132823',
        '4774087133669',
        '4774087133670',
        '4774087133671',
        '4774088104008',
        '4774088104009',
        '4774089166860',
        '4774089166861',
        '4774089166862',
        '4774089166863',
        '4774090106948',
        '4774090106949',
        '4774091144103',
        '4774091144104',
        '4774091144105',
        '4774092132885',
        '4774092132886',
        '4774092132887',
        '4774093155316',
        '4774093155317',
        '4774093155318',
        '4774093155319',
        '4774094208585',
        '4774094208586',
        '4774094208587',
        '4774094208588',
        '4774095105546',
        '4774095105547',
        '4774095105548',
        '4774096109360',
        '4774096109361',
        '4774097131294',
        '4774097131295',
        '4774097131296',
        '4774098124008',
        '4774098124009',
        '4774099129527',
        '4774099129528',
        '4774100121502',
        '4774100121503',
        '4774101124055',
        '4774101124056',
        '4774101124057',
        '4774102126767',
        '4774102126768',
        '4774102126769',
        '4774102126770',
        '4774103137928',
        '4774103137929',
        '4774103137930',
        '4774104139807',
        '4774104139808',
        '4774104139809',
        '4774105118557',
        '4774105118558',
        '4774106140518',
        '4774106140519',
        '4774107126877',
        '4774107126878',
        '4774108120442',
        '4774108120443',
        '4774109136061',
        '4774109136062',
        '4774109136063',
        '4774110123928',
        '4774110123929',
        '4774110123930',
        '4774111157563',
        '4774111157564',
        '4774111157565',
        '4774112171733',
        '4774112171734',
        '4774112171735',
        '4774113144726',
        '4774113144727',
        '4774113144728',
        '4774114127804',
        '4774114127805',
        '4774115129121',
        '4774115129122',
        '4774116133746',
        '4774116133747',
        '4774116133748',
        '4774117116892',
        '4774117116893',
        '4774119135574',
        '4774119135575',
        '4774119135576',
        '4774120127371',
        '4774120127372',
        '4774121143326',
        '4774121143327',
        '4774122139335',
        '4774122139336',
        '4774123126129',
        '4774123126130',
        '4774124156039',
        '4774124156040',
        '4774125144985',
        '4774125144986',
        '4774125144987',
        '4774128137520',
        '4774128137521',
        '4774129130843',
        '4774129130844',
        '4774130122833',
        '4774130122834',
        '4774131149993',
        '4774131149994',
        '4774131149995'
    )
    csv = 'name,declined,parties,won\n'
    file = open('info2017.csv', 'w')
    district = 1
    for link_mid in link_mids:
        show_progress_bar(district, mandates=125)
        district += 1
        file.write(csv)
        csv = parse_page_info(link_left + link_mid + link_right)
        district += 1
        # time.sleep(9)
    file.write(csv)
    file.close()

def parse_election_results2017():
    ssl._create_default_https_context = ssl._create_unverified_context
    link_left = 'http://www.moscow-city.vybory.izbirkom.ru/region/izbirkom?action=show&root=1&tvd='
    link_right = '&vrn=4774004151542&prver=0&pronetvd=null&region=77&sub_region=77&type=426&report_mode=null'
    link_mids = (
        '4774001137463',
        '4774001137464',
        '4774001137465',
        '4774002138804',
        '4774002138805',
        '4774002138806',
        '4774003123938',
        '4774003123939',
        '4774012107877',
        '4774012107878',
        '4774004151548',
        '4774004151547',
        '4774004151549',
        '4774005159149',
        '4774005159150',
        '4774005159151',
        '4774006133202',
        '4774006133203',
        '4774006133204',
        '4774007117789',
        '4774007117790',
        '4774008112814',
        '4774008112815',
        '4774010120042',
        '4774010120043',
        '4774010120044',
        '4774009134024',
        '4774009134025',
        '4774009134026',
        '4774011164122',
        '4774011164123',
        '4774011164124',
        '4774013126105',
        '4774013126106',
        '4774014127356',
        '4774014127357',
        '4774014127358',
        '4774015125479',
        '4774015125480',
        '4774015125481',
        '4774016123407',
        '4774016123408',
        '4774017109310',
        '4774017109311',
        '4774018119471',
        '4774018119472',
        '4774018119473',
        '4774018119474',
        '4774019123064',
        '4774019123065',
        '4774020142944',
        '4774020142945',
        '4774022146204',
        '4774022146205',
        '4774024151060',
        '4774024151061',
        '4774025130167',
        '4774025130168',
        '4774026116759',
        '4774026116760',
        '4774027138657',
        '4774027138658',
        '4774027138659',
        '4774028131168',
        '4774028131169',
        '4774029131732',
        '4774029131733',
        '4774030117556',
        '4774030117557',
        '4774031150415',
        '4774031150416',
        '4774033139896',
        '4774033139897',
        '4774035127413',
        '4774035127414',
        '4774040125484',
        '4774040125485',
        '4774032129795',
        '4774032129796',
        '4774034121516',
        '4774034121517',
        '4774037132330',
        '4774037132331',
        '4774037132332',
        '4774038112491',
        '4774038112492',
        '4774039117558',
        '4774039117559',
        '4774041119361',
        '4774041119362',
        '4774042124060',
        '4774042124061',
        '4774043127376',
        '4774043127377',
        '4774044122775',
        '4774044122776',
        '4774045124912',
        '4774045124913',
        '4774046124875',
        '4774046124876',
        '4774046124877',
        '4774047135543',
        '4774047135544',
        '4774048101212',
        '4774048101213',
        '4774049118224',
        '4774049118225',
        '4774049118226',
        '4774050137747',
        '4774050137748',
        '4774051128354',
        '4774051128355',
        '4774051128356',
        '4774052120879',
        '4774052120880',
        '4774052120881',
        '4774053124433',
        '4774053124434',
        '4774054119828',
        '4774054119829',
        '4774055127958',
        '4774055127959',
        '4774055127960',
        '4774056135012',
        '4774056135013',
        '4774057146373',
        '4774057146374',
        '4774057146375',
        '4774058116515',
        '4774058116516',
        '4774059126072',
        '4774059126073',
        '4774059126074',
        '4774060123797',
        '4774060123798',
        '4774060123799',
        '4774061104160',
        '4774061104161',
        '4774062117711',
        '4774062117712',
        '4774063117435',
        '4774063117436',
        '4774063117437',
        '4774064162610',
        '4774064162611',
        '4774064162612',
        '4774064162613',
        '4774064162614',
        '4774064162615',
        '4774065109393',
        '4774065109394',
        '4774066120819',
        '4774066120820',
        '4774066120821',
        '4774067136362',
        '4774067136363',
        '4774067136364',
        '477406898052',
        '477406898053',
        '4774069123087',
        '4774069123088',
        '4774070141709',
        '4774070141710',
        '4774070141711',
        '4774075155461',
        '4774075155462',
        '4774075155463',
        '4774075155464',
        '477407199571',
        '477407199572',
        '4774072168743',
        '4774072168744',
        '4774072168745',
        '4774072168746',
        '4774073136974',
        '4774073136975',
        '4774073136976',
        '4774073136977',
        '4774074138228',
        '4774074138229',
        '4774074138230',
        '4774076147667',
        '4774076147668',
        '4774076147669',
        '4774078126729',
        '4774078126730',
        '4774078126731',
        '4774133140067',
        '4774133140068',
        '4774133140069',
        '4774133140070',
        '4774079115979',
        '4774079115980',
        '4774080151395',
        '4774080151396',
        '4774080151397',
        '4774081117444',
        '4774081117445',
        '4774082121716',
        '4774082121717',
        '4774083117859',
        '4774083117860',
        '4774084142983',
        '4774084142984',
        '4774084142985',
        '4774084142986',
        '4774084142987',
        '4774085133042',
        '4774085133043',
        '4774085133044',
        '4774086132820',
        '4774086132821',
        '4774086132822',
        '4774086132823',
        '4774087133669',
        '4774087133670',
        '4774087133671',
        '4774088104008',
        '4774088104009',
        '4774089166860',
        '4774089166861',
        '4774089166862',
        '4774089166863',
        '4774090106948',
        '4774090106949',
        '4774091144103',
        '4774091144104',
        '4774091144105',
        '4774092132885',
        '4774092132886',
        '4774092132887',
        '4774093155316',
        '4774093155317',
        '4774093155318',
        '4774093155319',
        '4774094208585',
        '4774094208586',
        '4774094208587',
        '4774094208588',
        '4774095105546',
        '4774095105547',
        '4774095105548',
        '4774096109360',
        '4774096109361',
        '4774097131294',
        '4774097131295',
        '4774097131296',
        '4774098124008',
        '4774098124009',
        '4774099129527',
        '4774099129528',
        '4774100121502',
        '4774100121503',
        '4774101124055',
        '4774101124056',
        '4774101124057',
        '4774102126767',
        '4774102126768',
        '4774102126769',
        '4774102126770',
        '4774103137928',
        '4774103137929',
        '4774103137930',
        '4774104139807',
        '4774104139808',
        '4774104139809',
        '4774105118557',
        '4774105118558',
        '4774106140518',
        '4774106140519',
        '4774107126877',
        '4774107126878',
        '4774108120442',
        '4774108120443',
        '4774109136061',
        '4774109136062',
        '4774109136063',
        '4774110123928',
        '4774110123929',
        '4774110123930',
        '4774111157563',
        '4774111157564',
        '4774111157565',
        '4774112171733',
        '4774112171734',
        '4774112171735',
        '4774113144726',
        '4774113144727',
        '4774113144728',
        '4774114127804',
        '4774114127805',
        '4774115129121',
        '4774115129122',
        '4774116133746',
        '4774116133747',
        '4774116133748',
        '4774117116892',
        '4774117116893',
        '4774119135574',
        '4774119135575',
        '4774119135576',
        '4774120127371',
        '4774120127372',
        '4774121143326',
        '4774121143327',
        '4774122139335',
        '4774122139336',
        '4774123126129',
        '4774123126130',
        '4774124156039',
        '4774124156040',
        '4774125144985',
        '4774125144986',
        '4774125144987',
        '4774128137520',
        '4774128137521',
        '4774129130843',
        '4774129130844',
        '4774130122833',
        '4774130122834',
        '4774131149993',
        '4774131149994',
        '4774131149995'
    )
    csv = 'name,district,mandate,votes,potential_voters,inside_voters,early_voters,outside_voters,attendance,early,outside\n'
    file = open('data2017.csv', 'w')
    district = 1
    for link_mid in link_mids:
        show_progress_bar(district, mandates=125)
        file.write(csv)
        csv = parse_page_results(link_left + link_mid + link_right)
        district += 1
        # time.sleep(9)
    file.write(csv)
    file.close()

